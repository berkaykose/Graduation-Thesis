{"remainingRequest":"/Users/berkaykose/Desktop/ValetSites/vue-rentacar/app/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/Users/berkaykose/Desktop/ValetSites/vue-rentacar/app/node_modules/cache-loader/dist/cjs.js??ref--1-0!/Users/berkaykose/Desktop/ValetSites/vue-rentacar/app/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/berkaykose/Desktop/ValetSites/vue-rentacar/app/src/views/Reservation.vue?vue&type=template&id=0adad4fc&","dependencies":[{"path":"/Users/berkaykose/Desktop/ValetSites/vue-rentacar/app/src/views/Reservation.vue","mtime":1643156668282},{"path":"/Users/berkaykose/Desktop/ValetSites/vue-rentacar/app/node_modules/cache-loader/dist/cjs.js","mtime":1642161841009},{"path":"/Users/berkaykose/Desktop/ValetSites/vue-rentacar/app/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":1642161841985},{"path":"/Users/berkaykose/Desktop/ValetSites/vue-rentacar/app/node_modules/cache-loader/dist/cjs.js","mtime":1642161841009},{"path":"/Users/berkaykose/Desktop/ValetSites/vue-rentacar/app/node_modules/vue-loader/lib/index.js","mtime":1642161841739}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}